{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"letters_to_a_new_developer/","text":"About \u00b6 This is collection of articles from the blog Letters To A New Developer \u2013 What I wish I had known when starting my development career that resonated with me and you might find useful as well. There is a corresponding book available through Safari Books, accessible with UA NetID. Letters to a New Developer: What I Wish I Had Known When Starting My Development Career [Book] Top! \u00b6 The best code is no code There are no adults in the room Think about how things can go wrong The perfect is the enemy of the good (and the done) No choice is permanent On debugging Software is about people, not code Most people don\u2019t know or care about the code. They\u2019re just trying to get something done. The most beautiful, well tested, flexible, configurable, documented, future proofed codebase that does the wrong thing is useless. Always be replacing yourself Learning \u00b6 Use an RSS Reader I use Feedly and subscribe to hundreds of feeds and dozens of newsletters, which themselves are generally lists of links. Subscribe to a weekly link newsletter Avoid The Impossible Goal of Being a Know It All Don\u2019t be afraid to ask questions Why Developers Should Engage in Continuous Learning Think about the terms you use in the query. I was looking recently for a way to use \"tags\" in Sharepoint. Tags didn't get what I wanted. I tried labels, which in Microsoft land is all about retention. After some permutations \"folksonomy\" is what I really wanted. Learning the jargon of different areas can be really important. Read great books about software development Never stop learning Why Developers Should Engage in Continuous Learning Communication \u00b6 Talk first, code later Writing Is An Undervalued Engineering Skill How to manage one to ones The Art To And Power Of Saying No You know more than you think Seek feedback loops Make the ask Tips for Building Your Work Network Why and how to improve your writing skills as a software developer Be a mentor Speaking isn\u2019t as scary as you think, eventually Tools \u00b6 Use the clipboard from the command line Related tip and super power tool is using a cliipboard manager (a tool that lets you copy, cut and paste items as many times as you need). In windows it's built in, win+V. On my mac I use the clipboard tool built into \"BetterTouchTool\", which I've customized in a few different ways. Flycut is another popular option. Google can\u2019t help if you don\u2019t know the words Learn the command line (Related: Cheating at a Company Group Activity Using Unix Tools ) Learn a text editor Learn Version Control Learn to use Google, and use it well Learn to use a debugger Read the documentation Learn a little jq, awk and sed Learn SQL Use copy/paste as much as you can Learn to type quickly Write good commit messages Save off context Use your shell\u2019s history Learn curl Smaller Nuggets \u00b6 What Mitchell learned in his first two years as a software developer Letters to a new developer from Joel Spolsky Laziness, impatience, hubris What is HackerNews\u2019 Best Advice to New Developers Things learned the hard way Things learned from a senior developer Three Mantras to Live By Contextual advice for new developers A letter to myself as a fresh software engineer Encouragement \u00b6 You can do this. \u201cIt never gets easier, you just go faster.\u201d Get used to failure Admit your weaknesses Making mistakes is OK One line I take issue with, If you work in an environment where you cannot acknowledge errors, make plans to leave as soon as possible. I completely agree with the sentiment; you should never need to hide mistakes. However, consider a more nuanced approach than immediately finding a new place to work. Try and change the culture if you can. Mistakes Are Forgiven, Hiding Them Is Not Be a great developer today One isn\u2019t required to know everything when one walks in the door, but one is expected to leave work each day having laid a few more bricks on top of an ever expanding foundation. Other \u00b6 The care and feeding of developers Outcomes over output Develop empathy Write that down! Learn to look around corners Act like an owner Show gratitude Write a brag document What is the best surprise of being a new developer? Know when to throw in the towel Know when to not throw in the towel Understand the business Your code is written to further some end. Over-index in your first few months \u2018You get what you give\u2019 Egoless programming Consistency Is Key Learn To Explain Concepts To Non-Technical Users One thing I\u2019ve learned over time is that if you can\u2019t explain a technology choice in a way that a non technical user can understand, you don\u2019t understand it Everyone, Including You, Has Something To Teach Assume Positive Intent There is no perfect system, it\u2019s all about the tradeoffs What if I have to make a technical decision and I don\u2019t know the right answer? Why software engineers are grumpy Coding is like a puzzle When do you feel like you\u2019re \u201csenior\u201d Create Value for People Think first about what problem this is solving and for whom","title":"Letters to a new developer"},{"location":"letters_to_a_new_developer/#about","text":"This is collection of articles from the blog Letters To A New Developer \u2013 What I wish I had known when starting my development career that resonated with me and you might find useful as well. There is a corresponding book available through Safari Books, accessible with UA NetID. Letters to a New Developer: What I Wish I Had Known When Starting My Development Career [Book]","title":"About"},{"location":"letters_to_a_new_developer/#top","text":"The best code is no code There are no adults in the room Think about how things can go wrong The perfect is the enemy of the good (and the done) No choice is permanent On debugging Software is about people, not code Most people don\u2019t know or care about the code. They\u2019re just trying to get something done. The most beautiful, well tested, flexible, configurable, documented, future proofed codebase that does the wrong thing is useless. Always be replacing yourself","title":"Top!"},{"location":"letters_to_a_new_developer/#learning","text":"Use an RSS Reader I use Feedly and subscribe to hundreds of feeds and dozens of newsletters, which themselves are generally lists of links. Subscribe to a weekly link newsletter Avoid The Impossible Goal of Being a Know It All Don\u2019t be afraid to ask questions Why Developers Should Engage in Continuous Learning Think about the terms you use in the query. I was looking recently for a way to use \"tags\" in Sharepoint. Tags didn't get what I wanted. I tried labels, which in Microsoft land is all about retention. After some permutations \"folksonomy\" is what I really wanted. Learning the jargon of different areas can be really important. Read great books about software development Never stop learning Why Developers Should Engage in Continuous Learning","title":"Learning"},{"location":"letters_to_a_new_developer/#communication","text":"Talk first, code later Writing Is An Undervalued Engineering Skill How to manage one to ones The Art To And Power Of Saying No You know more than you think Seek feedback loops Make the ask Tips for Building Your Work Network Why and how to improve your writing skills as a software developer Be a mentor Speaking isn\u2019t as scary as you think, eventually","title":"Communication"},{"location":"letters_to_a_new_developer/#tools","text":"Use the clipboard from the command line Related tip and super power tool is using a cliipboard manager (a tool that lets you copy, cut and paste items as many times as you need). In windows it's built in, win+V. On my mac I use the clipboard tool built into \"BetterTouchTool\", which I've customized in a few different ways. Flycut is another popular option. Google can\u2019t help if you don\u2019t know the words Learn the command line (Related: Cheating at a Company Group Activity Using Unix Tools ) Learn a text editor Learn Version Control Learn to use Google, and use it well Learn to use a debugger Read the documentation Learn a little jq, awk and sed Learn SQL Use copy/paste as much as you can Learn to type quickly Write good commit messages Save off context Use your shell\u2019s history Learn curl","title":"Tools"},{"location":"letters_to_a_new_developer/#smaller-nuggets","text":"What Mitchell learned in his first two years as a software developer Letters to a new developer from Joel Spolsky Laziness, impatience, hubris What is HackerNews\u2019 Best Advice to New Developers Things learned the hard way Things learned from a senior developer Three Mantras to Live By Contextual advice for new developers A letter to myself as a fresh software engineer","title":"Smaller Nuggets"},{"location":"letters_to_a_new_developer/#encouragement","text":"You can do this. \u201cIt never gets easier, you just go faster.\u201d Get used to failure Admit your weaknesses Making mistakes is OK One line I take issue with, If you work in an environment where you cannot acknowledge errors, make plans to leave as soon as possible. I completely agree with the sentiment; you should never need to hide mistakes. However, consider a more nuanced approach than immediately finding a new place to work. Try and change the culture if you can. Mistakes Are Forgiven, Hiding Them Is Not Be a great developer today One isn\u2019t required to know everything when one walks in the door, but one is expected to leave work each day having laid a few more bricks on top of an ever expanding foundation.","title":"Encouragement"},{"location":"letters_to_a_new_developer/#other","text":"The care and feeding of developers Outcomes over output Develop empathy Write that down! Learn to look around corners Act like an owner Show gratitude Write a brag document What is the best surprise of being a new developer? Know when to throw in the towel Know when to not throw in the towel Understand the business Your code is written to further some end. Over-index in your first few months \u2018You get what you give\u2019 Egoless programming Consistency Is Key Learn To Explain Concepts To Non-Technical Users One thing I\u2019ve learned over time is that if you can\u2019t explain a technology choice in a way that a non technical user can understand, you don\u2019t understand it Everyone, Including You, Has Something To Teach Assume Positive Intent There is no perfect system, it\u2019s all about the tradeoffs What if I have to make a technical decision and I don\u2019t know the right answer? Why software engineers are grumpy Coding is like a puzzle When do you feel like you\u2019re \u201csenior\u201d Create Value for People Think first about what problem this is solving and for whom","title":"Other"}]}